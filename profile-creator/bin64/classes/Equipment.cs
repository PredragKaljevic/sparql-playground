//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FTN {
    using System;
    using FTN;
    using System.Collections.Generic;
    
    
    /// The parts of a power system that are physical devices, electronic or mechanical.
    public class Equipment : PowerSystemResource {
        
        /// Additional equipment container beyond the primary equipment container.  The equipment is contained in another equipment container, but also grouped with this equipment container.
        private List<EquipmentContainer> cim_AdditionalEquipmentContainer = new List<EquipmentContainer>();
        
        private const bool isAdditionalEquipmentContainerMandatory = false;
        
        private const string _AdditionalEquipmentContainerPrefix = "cim";
        
        /// The aggregate flag provides an alternative way of representing an aggregated (equivalent) element. It is applicable in cases when the dedicated classes for equivalent equipment do not have all of the attributes necessary to represent the required level of detail.  In case the flag is set to “true” the single instance of equipment represents multiple pieces of equipment that have been modelled together as an aggregate equivalent obtained by a network reduction procedure. Examples would be power transformers or synchronous machines operating in parallel modelled as a single aggregate power transformer or aggregate synchronous machine.  
        ///The attribute is not used for EquivalentBranch, EquivalentShunt and EquivalentInjection.
        private System.Boolean? cim_aggregate;
        
        private const bool isAggregateMandatory = false;
        
        private const string _aggregatePrefix = "cim";
        
        /// Container of this equipment.
        private EquipmentContainer cim_EquipmentContainer;
        
        private const bool isEquipmentContainerMandatory = false;
        
        private const string _EquipmentContainerPrefix = "cim";
        
        /// Specifies the availability of the equipment. True means the equipment is available for topology processing, which determines if the equipment is energized or not. False means that the equipment is treated by network applications as if it is not in the model.
        private System.Boolean? cim_inService;
        
        private const bool isInServiceMandatory = false;
        
        private const string _inServicePrefix = "cim";
        
        /// The equipment is enabled to participate in network analysis.  If unspecified, the value is assumed to be true.
        private System.Boolean? cim_networkAnalysisEnabled;
        
        private const bool isNetworkAnalysisEnabledMandatory = false;
        
        private const string _networkAnalysisEnabledPrefix = "cim";
        
        /// Specifies the availability of the equipment under normal operating conditions. True means the equipment is available for topology processing, which determines if the equipment is energized or not. False means that the equipment is treated by network applications as if it is not in the model.
        private System.Boolean? cim_normallyInService;
        
        private const bool isNormallyInServiceMandatory = false;
        
        private const string _normallyInServicePrefix = "cim";
        
        public virtual List<EquipmentContainer> AdditionalEquipmentContainer {
            get {
                return this.cim_AdditionalEquipmentContainer;
            }
            set {
                this.cim_AdditionalEquipmentContainer = value;
            }
        }
        
        public virtual bool AdditionalEquipmentContainerHasValue {
            get {
                return this.cim_AdditionalEquipmentContainer != null;
            }
        }
        
        public static bool IsAdditionalEquipmentContainerMandatory {
            get {
                return isAdditionalEquipmentContainerMandatory;
            }
        }
        
        public static string AdditionalEquipmentContainerPrefix {
            get {
                return _AdditionalEquipmentContainerPrefix;
            }
        }
        
        public virtual bool Aggregate {
            get {
                return this.cim_aggregate.GetValueOrDefault();
            }
            set {
                this.cim_aggregate = value;
            }
        }
        
        public virtual bool AggregateHasValue {
            get {
                return this.cim_aggregate != null;
            }
        }
        
        public static bool IsAggregateMandatory {
            get {
                return isAggregateMandatory;
            }
        }
        
        public static string AggregatePrefix {
            get {
                return _aggregatePrefix;
            }
        }
        
        public virtual EquipmentContainer EquipmentContainer {
            get {
                return this.cim_EquipmentContainer;
            }
            set {
                this.cim_EquipmentContainer = value;
            }
        }
        
        public virtual bool EquipmentContainerHasValue {
            get {
                return this.cim_EquipmentContainer != null;
            }
        }
        
        public static bool IsEquipmentContainerMandatory {
            get {
                return isEquipmentContainerMandatory;
            }
        }
        
        public static string EquipmentContainerPrefix {
            get {
                return _EquipmentContainerPrefix;
            }
        }
        
        public virtual bool InService {
            get {
                return this.cim_inService.GetValueOrDefault();
            }
            set {
                this.cim_inService = value;
            }
        }
        
        public virtual bool InServiceHasValue {
            get {
                return this.cim_inService != null;
            }
        }
        
        public static bool IsInServiceMandatory {
            get {
                return isInServiceMandatory;
            }
        }
        
        public static string InServicePrefix {
            get {
                return _inServicePrefix;
            }
        }
        
        public virtual bool NetworkAnalysisEnabled {
            get {
                return this.cim_networkAnalysisEnabled.GetValueOrDefault();
            }
            set {
                this.cim_networkAnalysisEnabled = value;
            }
        }
        
        public virtual bool NetworkAnalysisEnabledHasValue {
            get {
                return this.cim_networkAnalysisEnabled != null;
            }
        }
        
        public static bool IsNetworkAnalysisEnabledMandatory {
            get {
                return isNetworkAnalysisEnabledMandatory;
            }
        }
        
        public static string NetworkAnalysisEnabledPrefix {
            get {
                return _networkAnalysisEnabledPrefix;
            }
        }
        
        public virtual bool NormallyInService {
            get {
                return this.cim_normallyInService.GetValueOrDefault();
            }
            set {
                this.cim_normallyInService = value;
            }
        }
        
        public virtual bool NormallyInServiceHasValue {
            get {
                return this.cim_normallyInService != null;
            }
        }
        
        public static bool IsNormallyInServiceMandatory {
            get {
                return isNormallyInServiceMandatory;
            }
        }
        
        public static string NormallyInServicePrefix {
            get {
                return _normallyInServicePrefix;
            }
        }
    }
}
