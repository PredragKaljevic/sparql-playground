//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FTN {
    using System;
    using FTN;
    using System.Collections.Generic;
    
    
    /// Transformer mesh impedance (Delta-model) between transformer ends.
    ///The typical case is that this class describes the impedance between two transformer ends pair-wise, i.e. the cardinalities at both transformer end associations are 1. However, in cases where two or more transformer ends are modelled the cardinalities are larger than 1.
    public class TransformerMeshImpedance : IdentifiedObject {
        
        /// From end this mesh impedance is connected to. It determines the voltage reference.
        private TransformerEnd cim_FromTransformerEnd;
        
        private const bool isFromTransformerEndMandatory = true;
        
        private const string _FromTransformerEndPrefix = "cim";
        
        /// Resistance between the 'from' and the 'to' end, seen from the 'from' end.
        private System.Single? cim_r;
        
        private const bool isRMandatory = false;
        
        private const string _rPrefix = "cim";
        
        /// Zero-sequence resistance between the 'from' and the 'to' end, seen from the 'from' end.
        private System.Single? cim_r0;
        
        private const bool isR0Mandatory = false;
        
        private const string _r0Prefix = "cim";
        
        /// All transformer ends this mesh impedance is connected to.
        private List<TransformerEnd> cim_ToTransformerEnd = new List<TransformerEnd>();
        
        private const bool isToTransformerEndMandatory = true;
        
        private const string _ToTransformerEndPrefix = "cim";
        
        /// Reactance between the 'from' and the 'to' end, seen from the 'from' end.
        private System.Single? cim_x;
        
        private const bool isXMandatory = false;
        
        private const string _xPrefix = "cim";
        
        /// Zero-sequence reactance between the 'from' and the 'to' end, seen from the 'from' end.
        private System.Single? cim_x0;
        
        private const bool isX0Mandatory = false;
        
        private const string _x0Prefix = "cim";
        
        public virtual TransformerEnd FromTransformerEnd {
            get {
                return this.cim_FromTransformerEnd;
            }
            set {
                this.cim_FromTransformerEnd = value;
            }
        }
        
        public virtual bool FromTransformerEndHasValue {
            get {
                return this.cim_FromTransformerEnd != null;
            }
        }
        
        public static bool IsFromTransformerEndMandatory {
            get {
                return isFromTransformerEndMandatory;
            }
        }
        
        public static string FromTransformerEndPrefix {
            get {
                return _FromTransformerEndPrefix;
            }
        }
        
        public virtual float R {
            get {
                return this.cim_r.GetValueOrDefault();
            }
            set {
                this.cim_r = value;
            }
        }
        
        public virtual bool RHasValue {
            get {
                return this.cim_r != null;
            }
        }
        
        public static bool IsRMandatory {
            get {
                return isRMandatory;
            }
        }
        
        public static string RPrefix {
            get {
                return _rPrefix;
            }
        }
        
        public virtual float R0 {
            get {
                return this.cim_r0.GetValueOrDefault();
            }
            set {
                this.cim_r0 = value;
            }
        }
        
        public virtual bool R0HasValue {
            get {
                return this.cim_r0 != null;
            }
        }
        
        public static bool IsR0Mandatory {
            get {
                return isR0Mandatory;
            }
        }
        
        public static string R0Prefix {
            get {
                return _r0Prefix;
            }
        }
        
        public virtual List<TransformerEnd> ToTransformerEnd {
            get {
                return this.cim_ToTransformerEnd;
            }
            set {
                this.cim_ToTransformerEnd = value;
            }
        }
        
        public virtual bool ToTransformerEndHasValue {
            get {
                return this.cim_ToTransformerEnd != null;
            }
        }
        
        public static bool IsToTransformerEndMandatory {
            get {
                return isToTransformerEndMandatory;
            }
        }
        
        public static string ToTransformerEndPrefix {
            get {
                return _ToTransformerEndPrefix;
            }
        }
        
        public virtual float X {
            get {
                return this.cim_x.GetValueOrDefault();
            }
            set {
                this.cim_x = value;
            }
        }
        
        public virtual bool XHasValue {
            get {
                return this.cim_x != null;
            }
        }
        
        public static bool IsXMandatory {
            get {
                return isXMandatory;
            }
        }
        
        public static string XPrefix {
            get {
                return _xPrefix;
            }
        }
        
        public virtual float X0 {
            get {
                return this.cim_x0.GetValueOrDefault();
            }
            set {
                this.cim_x0 = value;
            }
        }
        
        public virtual bool X0HasValue {
            get {
                return this.cim_x0 != null;
            }
        }
        
        public static bool IsX0Mandatory {
            get {
                return isX0Mandatory;
            }
        }
        
        public static string X0Prefix {
            get {
                return _x0Prefix;
            }
        }
    }
}
