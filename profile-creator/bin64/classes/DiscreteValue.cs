//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FTN {
    using System;
    using FTN;
    
    
    /// DiscreteValue represents a discrete MeasurementValue.
    public class DiscreteValue : MeasurementValue {
        
        /// Measurement to which this value is connected.
        private Discrete cim_Discrete;
        
        private const bool isDiscreteMandatory = true;
        
        private const string _DiscretePrefix = "cim";
        
        /// The value to supervise.
        private System.Int32? cim_value;
        
        private const bool isValueMandatory = false;
        
        private const string _valuePrefix = "cim";
        
        public virtual Discrete Discrete {
            get {
                return this.cim_Discrete;
            }
            set {
                this.cim_Discrete = value;
            }
        }
        
        public virtual bool DiscreteHasValue {
            get {
                return this.cim_Discrete != null;
            }
        }
        
        public static bool IsDiscreteMandatory {
            get {
                return isDiscreteMandatory;
            }
        }
        
        public static string DiscretePrefix {
            get {
                return _DiscretePrefix;
            }
        }
        
        public virtual int Value {
            get {
                return this.cim_value.GetValueOrDefault();
            }
            set {
                this.cim_value = value;
            }
        }
        
        public virtual bool ValueHasValue {
            get {
                return this.cim_value != null;
            }
        }
        
        public static bool IsValueMandatory {
            get {
                return isValueMandatory;
            }
        }
        
        public static string ValuePrefix {
            get {
                return _valuePrefix;
            }
        }
    }
}
