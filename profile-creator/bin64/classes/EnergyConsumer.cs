//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FTN {
    using System;
    using FTN;
    
    
    /// Generic user of energy - a  point of consumption on the power system model.
    ///EnergyConsumer.pfixed, .qfixed, .pfixedPct and .qfixedPct have meaning only if there is no LoadResponseCharacteristic associated with EnergyConsumer or if LoadResponseCharacteristic.exponentModel is set to False.
    public class EnergyConsumer : EnergyConnection {
        
        /// Number of individual customers represented by this demand.
        private System.Int32? cim_customerCount;
        
        private const bool isCustomerCountMandatory = false;
        
        private const string _customerCountPrefix = "cim";
        
        /// Used for Yn and Zn connections. True if the neutral is solidly grounded.
        private System.Boolean? cim_grounded;
        
        private const bool isGroundedMandatory = false;
        
        private const string _groundedPrefix = "cim";
        
        /// Active power of the load. Load sign convention is used, i.e. positive sign means flow out from a node.
        ///For voltage dependent loads the value is at rated voltage.
        ///Starting value for a steady state solution.
        private System.Single? cim_p;
        
        private const bool isPMandatory = false;
        
        private const string _pPrefix = "cim";
        
        /// Active power of the load that is a fixed quantity and does not vary as load group value varies. Load sign convention is used, i.e. positive sign means flow out from a node.
        private System.Single? cim_pfixed;
        
        private const bool isPfixedMandatory = false;
        
        private const string _pfixedPrefix = "cim";
        
        /// Fixed active power as a percentage of load group fixed active power. Used to represent the time-varying components.  Load sign convention is used, i.e. positive sign means flow out from a node.
        private System.Single? cim_pfixedPct;
        
        private const bool isPfixedPctMandatory = false;
        
        private const string _pfixedPctPrefix = "cim";
        
        /// The type of phase connection, such as wye or delta.
        private PhaseShuntConnectionKind? cim_phaseConnection;
        
        private const bool isPhaseConnectionMandatory = false;
        
        private const string _phaseConnectionPrefix = "cim";
        
        /// Reactive power of the load. Load sign convention is used, i.e. positive sign means flow out from a node.
        ///For voltage dependent loads the value is at rated voltage.
        ///Starting value for a steady state solution.
        private System.Single? cim_q;
        
        private const bool isQMandatory = false;
        
        private const string _qPrefix = "cim";
        
        /// Reactive power of the load that is a fixed quantity and does not vary as load group value varies. Load sign convention is used, i.e. positive sign means flow out from a node.
        private System.Single? cim_qfixed;
        
        private const bool isQfixedMandatory = false;
        
        private const string _qfixedPrefix = "cim";
        
        /// Fixed reactive power as a percentage of load group fixed reactive power. Used to represent the time-varying components.  Load sign convention is used, i.e. positive sign means flow out from a node.
        private System.Single? cim_qfixedPct;
        
        private const bool isQfixedPctMandatory = false;
        
        private const string _qfixedPctPrefix = "cim";
        
        public virtual int CustomerCount {
            get {
                return this.cim_customerCount.GetValueOrDefault();
            }
            set {
                this.cim_customerCount = value;
            }
        }
        
        public virtual bool CustomerCountHasValue {
            get {
                return this.cim_customerCount != null;
            }
        }
        
        public static bool IsCustomerCountMandatory {
            get {
                return isCustomerCountMandatory;
            }
        }
        
        public static string CustomerCountPrefix {
            get {
                return _customerCountPrefix;
            }
        }
        
        public virtual bool Grounded {
            get {
                return this.cim_grounded.GetValueOrDefault();
            }
            set {
                this.cim_grounded = value;
            }
        }
        
        public virtual bool GroundedHasValue {
            get {
                return this.cim_grounded != null;
            }
        }
        
        public static bool IsGroundedMandatory {
            get {
                return isGroundedMandatory;
            }
        }
        
        public static string GroundedPrefix {
            get {
                return _groundedPrefix;
            }
        }
        
        public virtual float P {
            get {
                return this.cim_p.GetValueOrDefault();
            }
            set {
                this.cim_p = value;
            }
        }
        
        public virtual bool PHasValue {
            get {
                return this.cim_p != null;
            }
        }
        
        public static bool IsPMandatory {
            get {
                return isPMandatory;
            }
        }
        
        public static string PPrefix {
            get {
                return _pPrefix;
            }
        }
        
        public virtual float Pfixed {
            get {
                return this.cim_pfixed.GetValueOrDefault();
            }
            set {
                this.cim_pfixed = value;
            }
        }
        
        public virtual bool PfixedHasValue {
            get {
                return this.cim_pfixed != null;
            }
        }
        
        public static bool IsPfixedMandatory {
            get {
                return isPfixedMandatory;
            }
        }
        
        public static string PfixedPrefix {
            get {
                return _pfixedPrefix;
            }
        }
        
        public virtual float PfixedPct {
            get {
                return this.cim_pfixedPct.GetValueOrDefault();
            }
            set {
                this.cim_pfixedPct = value;
            }
        }
        
        public virtual bool PfixedPctHasValue {
            get {
                return this.cim_pfixedPct != null;
            }
        }
        
        public static bool IsPfixedPctMandatory {
            get {
                return isPfixedPctMandatory;
            }
        }
        
        public static string PfixedPctPrefix {
            get {
                return _pfixedPctPrefix;
            }
        }
        
        public virtual PhaseShuntConnectionKind PhaseConnection {
            get {
                return this.cim_phaseConnection.GetValueOrDefault();
            }
            set {
                this.cim_phaseConnection = value;
            }
        }
        
        public virtual bool PhaseConnectionHasValue {
            get {
                return this.cim_phaseConnection != null;
            }
        }
        
        public static bool IsPhaseConnectionMandatory {
            get {
                return isPhaseConnectionMandatory;
            }
        }
        
        public static string PhaseConnectionPrefix {
            get {
                return _phaseConnectionPrefix;
            }
        }
        
        public virtual float Q {
            get {
                return this.cim_q.GetValueOrDefault();
            }
            set {
                this.cim_q = value;
            }
        }
        
        public virtual bool QHasValue {
            get {
                return this.cim_q != null;
            }
        }
        
        public static bool IsQMandatory {
            get {
                return isQMandatory;
            }
        }
        
        public static string QPrefix {
            get {
                return _qPrefix;
            }
        }
        
        public virtual float Qfixed {
            get {
                return this.cim_qfixed.GetValueOrDefault();
            }
            set {
                this.cim_qfixed = value;
            }
        }
        
        public virtual bool QfixedHasValue {
            get {
                return this.cim_qfixed != null;
            }
        }
        
        public static bool IsQfixedMandatory {
            get {
                return isQfixedMandatory;
            }
        }
        
        public static string QfixedPrefix {
            get {
                return _qfixedPrefix;
            }
        }
        
        public virtual float QfixedPct {
            get {
                return this.cim_qfixedPct.GetValueOrDefault();
            }
            set {
                this.cim_qfixedPct = value;
            }
        }
        
        public virtual bool QfixedPctHasValue {
            get {
                return this.cim_qfixedPct != null;
            }
        }
        
        public static bool IsQfixedPctMandatory {
            get {
                return isQfixedPctMandatory;
            }
        }
        
        public static string QfixedPctPrefix {
            get {
                return _qfixedPctPrefix;
            }
        }
    }
}
