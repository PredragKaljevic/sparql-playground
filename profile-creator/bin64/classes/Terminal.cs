//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FTN {
    using System;
    using FTN;
    
    
    /// An AC electrical connection point to a piece of conducting equipment. Terminals are connected at physical connection points called connectivity nodes.
    public class Terminal : ACDCTerminal {
        
        /// The conducting equipment of the terminal.  Conducting equipment have  terminals that may be connected to other conducting equipment terminals via connectivity nodes or topological nodes.
        private ConductingEquipment cim_ConductingEquipment;
        
        private const bool isConductingEquipmentMandatory = true;
        
        private const string _ConductingEquipmentPrefix = "cim";
        
        /// The connectivity node to which this terminal connects with zero impedance.
        private ConnectivityNode cim_ConnectivityNode;
        
        private const bool isConnectivityNodeMandatory = false;
        
        private const string _ConnectivityNodePrefix = "cim";
        
        /// The feeder that this terminal normally feeds.  Only specified for the terminals at head of feeders.
        private Feeder cim_NormalHeadFeeder;
        
        private const bool isNormalHeadFeederMandatory = false;
        
        private const string _NormalHeadFeederPrefix = "cim";
        
        /// Represents the normal network phasing condition. If the attribute is missing, three phases (ABC) shall be assumed, except for terminals of grounding classes (specializations of EarthFaultCompensator, GroundDisconnector, GroundSwitch, and Ground) which will be assumed to be N. Therefore, phase code ABCN is explicitly declared when needed, e.g. for star point grounding equipment.
        ///The phase code on terminals connecting same ConnectivityNode or same TopologicalNode as well as for equipment between two terminals shall be consistent.
        private PhaseCode? cim_phases;
        
        private const bool isPhasesMandatory = false;
        
        private const string _phasesPrefix = "cim";
        
        public virtual ConductingEquipment ConductingEquipment {
            get {
                return this.cim_ConductingEquipment;
            }
            set {
                this.cim_ConductingEquipment = value;
            }
        }
        
        public virtual bool ConductingEquipmentHasValue {
            get {
                return this.cim_ConductingEquipment != null;
            }
        }
        
        public static bool IsConductingEquipmentMandatory {
            get {
                return isConductingEquipmentMandatory;
            }
        }
        
        public static string ConductingEquipmentPrefix {
            get {
                return _ConductingEquipmentPrefix;
            }
        }
        
        public virtual ConnectivityNode ConnectivityNode {
            get {
                return this.cim_ConnectivityNode;
            }
            set {
                this.cim_ConnectivityNode = value;
            }
        }
        
        public virtual bool ConnectivityNodeHasValue {
            get {
                return this.cim_ConnectivityNode != null;
            }
        }
        
        public static bool IsConnectivityNodeMandatory {
            get {
                return isConnectivityNodeMandatory;
            }
        }
        
        public static string ConnectivityNodePrefix {
            get {
                return _ConnectivityNodePrefix;
            }
        }
        
        public virtual Feeder NormalHeadFeeder {
            get {
                return this.cim_NormalHeadFeeder;
            }
            set {
                this.cim_NormalHeadFeeder = value;
            }
        }
        
        public virtual bool NormalHeadFeederHasValue {
            get {
                return this.cim_NormalHeadFeeder != null;
            }
        }
        
        public static bool IsNormalHeadFeederMandatory {
            get {
                return isNormalHeadFeederMandatory;
            }
        }
        
        public static string NormalHeadFeederPrefix {
            get {
                return _NormalHeadFeederPrefix;
            }
        }
        
        public virtual PhaseCode Phases {
            get {
                return this.cim_phases.GetValueOrDefault();
            }
            set {
                this.cim_phases = value;
            }
        }
        
        public virtual bool PhasesHasValue {
            get {
                return this.cim_phases != null;
            }
        }
        
        public static bool IsPhasesMandatory {
            get {
                return isPhasesMandatory;
            }
        }
        
        public static string PhasesPrefix {
            get {
                return _phasesPrefix;
            }
        }
    }
}
