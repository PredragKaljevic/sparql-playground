//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FTN {
    using System;
    using FTN;
    
    
    /// A Measurement represents any measured, calculated or non-measured non-calculated quantity. Any piece of equipment may contain Measurements, e.g. a substation may have temperature measurements and door open indications, a transformer may have oil temperature and tank pressure measurements, a bay may contain a number of power flow measurements and a Breaker may contain a switch status measurement. 
    ///The PSR - Measurement association is intended to capture this use of Measurement and is included in the naming hierarchy based on EquipmentContainer. The naming hierarchy typically has Measurements as leaves, e.g. Substation-VoltageLevel-Bay-Switch-Measurement.
    ///Some Measurements represent quantities related to a particular sensor location in the network, e.g. a voltage transformer (VT) or potential transformer (PT) at a busbar or a current transformer (CT) at the bar between a breaker and an isolator. The sensing position is not captured in the PSR - Measurement association. Instead it is captured by the Measurement - Terminal association that is used to define the sensing location in the network topology. The location is defined by the connection of the Terminal to ConductingEquipment. 
    ///If both a Terminal and PSR are associated, and the PSR is of type ConductingEquipment, the associated Terminal should belong to that ConductingEquipment instance.
    ///When the sensor location is needed both Measurement-PSR and Measurement-Terminal are used. The Measurement-Terminal association is never used alone.
    public class Measurement : IdentifiedObject {
        
        /// Specifies the type of measurement.  For example, this specifies if the measurement represents an indoor temperature, outdoor temperature, bus voltage, line flow, etc.
        ///When the measurementType is set to "Specialization", the type of Measurement is defined in more detail by the specialized class which inherits from Measurement.
        private string cim_measurementType;
        
        private const bool isMeasurementTypeMandatory = false;
        
        private const string _measurementTypePrefix = "cim";
        
        /// Indicates to which phases the measurement applies and avoids the need to use 'measurementType' to also encode phase information (which would explode the types). The phase information in Measurement, along with 'measurementType' and 'phases' uniquely defines a Measurement for a device, based on normal network phase. Their meaning will not change when the computed energizing phasing is changed due to jumpers or other reasons.
        ///If the attribute is missing three phases (ABC) shall be assumed.
        private PhaseCode? cim_phases;
        
        private const bool isPhasesMandatory = false;
        
        private const string _phasesPrefix = "cim";
        
        /// The power system resource that contains the measurement.
        private PowerSystemResource cim_PowerSystemResource;
        
        private const bool isPowerSystemResourceMandatory = false;
        
        private const string _PowerSystemResourcePrefix = "cim";
        
        /// One or more measurements may be associated with a terminal in the network.
        private ACDCTerminal cim_Terminal;
        
        private const bool isTerminalMandatory = false;
        
        private const string _TerminalPrefix = "cim";
        
        /// The unit multiplier of the measured quantity.
        private UnitMultiplier? cim_unitMultiplier;
        
        private const bool isUnitMultiplierMandatory = false;
        
        private const string _unitMultiplierPrefix = "cim";
        
        /// The unit of measure of the measured quantity.
        private UnitSymbol? cim_unitSymbol;
        
        private const bool isUnitSymbolMandatory = false;
        
        private const string _unitSymbolPrefix = "cim";
        
        public virtual string MeasurementType {
            get {
                return this.cim_measurementType;
            }
            set {
                this.cim_measurementType = value;
            }
        }
        
        public virtual bool MeasurementTypeHasValue {
            get {
                return this.cim_measurementType != null;
            }
        }
        
        public static bool IsMeasurementTypeMandatory {
            get {
                return isMeasurementTypeMandatory;
            }
        }
        
        public static string MeasurementTypePrefix {
            get {
                return _measurementTypePrefix;
            }
        }
        
        public virtual PhaseCode Phases {
            get {
                return this.cim_phases.GetValueOrDefault();
            }
            set {
                this.cim_phases = value;
            }
        }
        
        public virtual bool PhasesHasValue {
            get {
                return this.cim_phases != null;
            }
        }
        
        public static bool IsPhasesMandatory {
            get {
                return isPhasesMandatory;
            }
        }
        
        public static string PhasesPrefix {
            get {
                return _phasesPrefix;
            }
        }
        
        public virtual PowerSystemResource PowerSystemResource {
            get {
                return this.cim_PowerSystemResource;
            }
            set {
                this.cim_PowerSystemResource = value;
            }
        }
        
        public virtual bool PowerSystemResourceHasValue {
            get {
                return this.cim_PowerSystemResource != null;
            }
        }
        
        public static bool IsPowerSystemResourceMandatory {
            get {
                return isPowerSystemResourceMandatory;
            }
        }
        
        public static string PowerSystemResourcePrefix {
            get {
                return _PowerSystemResourcePrefix;
            }
        }
        
        public virtual ACDCTerminal Terminal {
            get {
                return this.cim_Terminal;
            }
            set {
                this.cim_Terminal = value;
            }
        }
        
        public virtual bool TerminalHasValue {
            get {
                return this.cim_Terminal != null;
            }
        }
        
        public static bool IsTerminalMandatory {
            get {
                return isTerminalMandatory;
            }
        }
        
        public static string TerminalPrefix {
            get {
                return _TerminalPrefix;
            }
        }
        
        public virtual UnitMultiplier UnitMultiplier {
            get {
                return this.cim_unitMultiplier.GetValueOrDefault();
            }
            set {
                this.cim_unitMultiplier = value;
            }
        }
        
        public virtual bool UnitMultiplierHasValue {
            get {
                return this.cim_unitMultiplier != null;
            }
        }
        
        public static bool IsUnitMultiplierMandatory {
            get {
                return isUnitMultiplierMandatory;
            }
        }
        
        public static string UnitMultiplierPrefix {
            get {
                return _unitMultiplierPrefix;
            }
        }
        
        public virtual UnitSymbol UnitSymbol {
            get {
                return this.cim_unitSymbol.GetValueOrDefault();
            }
            set {
                this.cim_unitSymbol = value;
            }
        }
        
        public virtual bool UnitSymbolHasValue {
            get {
                return this.cim_unitSymbol != null;
            }
        }
        
        public static bool IsUnitSymbolMandatory {
            get {
                return isUnitSymbolMandatory;
            }
        }
        
        public static string UnitSymbolPrefix {
            get {
                return _unitSymbolPrefix;
            }
        }
    }
}
