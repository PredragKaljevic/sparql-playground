//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FTN {
    using System;
    using FTN;
    
    
    /// A single phase of an energy consumer.
    public class EnergyConsumerPhase : PowerSystemResource {
        
        /// The energy consumer to which this phase belongs.
        private EnergyConsumer cim_EnergyConsumer;
        
        private const bool isEnergyConsumerMandatory = true;
        
        private const string _EnergyConsumerPrefix = "cim";
        
        private string cim_loadGroup;
        
        private const bool isLoadGroupMandatory = false;
        
        private const string _loadGroupPrefix = "ftn";
        
        /// Active power of the load. Load sign convention is used, i.e. positive sign means flow out from a node.
        ///For voltage dependent loads the value is at rated voltage.
        ///Starting value for a steady state solution.
        private System.Single? cim_p;
        
        private const bool isPMandatory = false;
        
        private const string _pPrefix = "cim";
        
        /// Active power of the load that is a fixed quantity. Load sign convention is used, i.e. positive sign means flow out from a node.
        private System.Single? cim_pfixed;
        
        private const bool isPfixedMandatory = false;
        
        private const string _pfixedPrefix = "cim";
        
        /// Fixed active power as per cent of load group fixed active power. Load sign convention is used, i.e. positive sign means flow out from a node.
        private System.Single? cim_pfixedPct;
        
        private const bool isPfixedPctMandatory = false;
        
        private const string _pfixedPctPrefix = "cim";
        
        /// Phase of this energy consumer component.   If the energy consumer is wye connected, the connection is from the indicated phase to the central ground or neutral point.  If the energy consumer is delta connected, the phase indicates an energy consumer connected from the indicated phase to the next logical non-neutral phase.
        private SinglePhaseKind? cim_phase;
        
        private const bool isPhaseMandatory = false;
        
        private const string _phasePrefix = "cim";
        
        /// Reactive power of the load. Load sign convention is used, i.e. positive sign means flow out from a node.
        ///For voltage dependent loads the value is at rated voltage.
        ///Starting value for a steady state solution.
        private System.Single? cim_q;
        
        private const bool isQMandatory = false;
        
        private const string _qPrefix = "cim";
        
        /// Reactive power of the load that is a fixed quantity. Load sign convention is used, i.e. positive sign means flow out from a node.
        private System.Single? cim_qfixed;
        
        private const bool isQfixedMandatory = false;
        
        private const string _qfixedPrefix = "cim";
        
        /// Fixed reactive power as per cent of load group fixed reactive power. Load sign convention is used, i.e. positive sign means flow out from a node.
        private System.Single? cim_qfixedPct;
        
        private const bool isQfixedPctMandatory = false;
        
        private const string _qfixedPctPrefix = "cim";
        
        public virtual EnergyConsumer EnergyConsumer {
            get {
                return this.cim_EnergyConsumer;
            }
            set {
                this.cim_EnergyConsumer = value;
            }
        }
        
        public virtual bool EnergyConsumerHasValue {
            get {
                return this.cim_EnergyConsumer != null;
            }
        }
        
        public static bool IsEnergyConsumerMandatory {
            get {
                return isEnergyConsumerMandatory;
            }
        }
        
        public static string EnergyConsumerPrefix {
            get {
                return _EnergyConsumerPrefix;
            }
        }
        
        public virtual string LoadGroup {
            get {
                return this.cim_loadGroup;
            }
            set {
                this.cim_loadGroup = value;
            }
        }
        
        public virtual bool LoadGroupHasValue {
            get {
                return this.cim_loadGroup != null;
            }
        }
        
        public static bool IsLoadGroupMandatory {
            get {
                return isLoadGroupMandatory;
            }
        }
        
        public static string LoadGroupPrefix {
            get {
                return _loadGroupPrefix;
            }
        }
        
        public virtual float P {
            get {
                return this.cim_p.GetValueOrDefault();
            }
            set {
                this.cim_p = value;
            }
        }
        
        public virtual bool PHasValue {
            get {
                return this.cim_p != null;
            }
        }
        
        public static bool IsPMandatory {
            get {
                return isPMandatory;
            }
        }
        
        public static string PPrefix {
            get {
                return _pPrefix;
            }
        }
        
        public virtual float Pfixed {
            get {
                return this.cim_pfixed.GetValueOrDefault();
            }
            set {
                this.cim_pfixed = value;
            }
        }
        
        public virtual bool PfixedHasValue {
            get {
                return this.cim_pfixed != null;
            }
        }
        
        public static bool IsPfixedMandatory {
            get {
                return isPfixedMandatory;
            }
        }
        
        public static string PfixedPrefix {
            get {
                return _pfixedPrefix;
            }
        }
        
        public virtual float PfixedPct {
            get {
                return this.cim_pfixedPct.GetValueOrDefault();
            }
            set {
                this.cim_pfixedPct = value;
            }
        }
        
        public virtual bool PfixedPctHasValue {
            get {
                return this.cim_pfixedPct != null;
            }
        }
        
        public static bool IsPfixedPctMandatory {
            get {
                return isPfixedPctMandatory;
            }
        }
        
        public static string PfixedPctPrefix {
            get {
                return _pfixedPctPrefix;
            }
        }
        
        public virtual SinglePhaseKind Phase {
            get {
                return this.cim_phase.GetValueOrDefault();
            }
            set {
                this.cim_phase = value;
            }
        }
        
        public virtual bool PhaseHasValue {
            get {
                return this.cim_phase != null;
            }
        }
        
        public static bool IsPhaseMandatory {
            get {
                return isPhaseMandatory;
            }
        }
        
        public static string PhasePrefix {
            get {
                return _phasePrefix;
            }
        }
        
        public virtual float Q {
            get {
                return this.cim_q.GetValueOrDefault();
            }
            set {
                this.cim_q = value;
            }
        }
        
        public virtual bool QHasValue {
            get {
                return this.cim_q != null;
            }
        }
        
        public static bool IsQMandatory {
            get {
                return isQMandatory;
            }
        }
        
        public static string QPrefix {
            get {
                return _qPrefix;
            }
        }
        
        public virtual float Qfixed {
            get {
                return this.cim_qfixed.GetValueOrDefault();
            }
            set {
                this.cim_qfixed = value;
            }
        }
        
        public virtual bool QfixedHasValue {
            get {
                return this.cim_qfixed != null;
            }
        }
        
        public static bool IsQfixedMandatory {
            get {
                return isQfixedMandatory;
            }
        }
        
        public static string QfixedPrefix {
            get {
                return _qfixedPrefix;
            }
        }
        
        public virtual float QfixedPct {
            get {
                return this.cim_qfixedPct.GetValueOrDefault();
            }
            set {
                this.cim_qfixedPct = value;
            }
        }
        
        public virtual bool QfixedPctHasValue {
            get {
                return this.cim_qfixedPct != null;
            }
        }
        
        public static bool IsQfixedPctMandatory {
            get {
                return isQfixedPctMandatory;
            }
        }
        
        public static string QfixedPctPrefix {
            get {
                return _qfixedPctPrefix;
            }
        }
    }
}
