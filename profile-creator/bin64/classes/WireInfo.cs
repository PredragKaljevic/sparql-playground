//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FTN {
    using System;
    using FTN;
    
    
    /// Wire data that can be specified per line segment phase, or for the line segment as a whole in case its phases all have the same wire characteristics.
    public class WireInfo : AssetInfo {
        
        /// (if there is a different core material) Radius of the central core.
        private System.Single? cim_coreRadius;
        
        private const bool isCoreRadiusMandatory = false;
        
        private const string _coreRadiusPrefix = "cim";
        
        /// (if used) Number of strands in the steel core.
        private System.Int32? cim_coreStrandCount;
        
        private const bool isCoreStrandCountMandatory = false;
        
        private const string _coreStrandCountPrefix = "cim";
        
        /// Geometric mean radius. If we replace the conductor by a thin walled tube of radius GMR, then its reactance is identical to the reactance of the actual conductor.
        private System.Single? cim_gmr;
        
        private const bool isGmrMandatory = false;
        
        private const string _gmrPrefix = "cim";
        
        /// True if conductor is insulated.
        private System.Boolean? cim_insulated;
        
        private const bool isInsulatedMandatory = false;
        
        private const string _insulatedPrefix = "cim";
        
        /// (if insulated conductor) Material used for insulation.
        private WireInsulationKind? cim_insulationMaterial;
        
        private const bool isInsulationMaterialMandatory = false;
        
        private const string _insulationMaterialPrefix = "cim";
        
        /// (if insulated conductor) Thickness of the insulation.
        private System.Single? cim_insulationThickness;
        
        private const bool isInsulationThicknessMandatory = false;
        
        private const string _insulationThicknessPrefix = "cim";
        
        /// Conductor material.
        private WireMaterialKind? cim_material;
        
        private const bool isMaterialMandatory = false;
        
        private const string _materialPrefix = "cim";
        
        /// AC resistance per unit length of the conductor at 25 째C.
        private System.Single? cim_rAC25;
        
        private const bool isRAC25Mandatory = false;
        
        private const string _rAC25Prefix = "cim";
        
        /// AC resistance per unit length of the conductor at 50 째C.
        private System.Single? cim_rAC50;
        
        private const bool isRAC50Mandatory = false;
        
        private const string _rAC50Prefix = "cim";
        
        /// AC resistance per unit length of the conductor at 75 째C.
        private System.Single? cim_rAC75;
        
        private const bool isRAC75Mandatory = false;
        
        private const string _rAC75Prefix = "cim";
        
        /// Outside radius of the wire.
        private System.Single? cim_radius;
        
        private const bool isRadiusMandatory = false;
        
        private const string _radiusPrefix = "cim";
        
        /// Current carrying capacity of the wire under stated thermal conditions.
        private System.Single? cim_ratedCurrent;
        
        private const bool isRatedCurrentMandatory = false;
        
        private const string _ratedCurrentPrefix = "cim";
        
        /// DC resistance per unit length of the conductor at 20 째C.
        private System.Single? cim_rDC20;
        
        private const bool isRDC20Mandatory = false;
        
        private const string _rDC20Prefix = "cim";
        
        /// Describes the wire gauge or cross section (e.g., 4/0, #2, 336.5).
        private string cim_sizeDescription;
        
        private const bool isSizeDescriptionMandatory = false;
        
        private const string _sizeDescriptionPrefix = "cim";
        
        /// Number of strands in the conductor.
        private System.Int32? cim_strandCount;
        
        private const bool isStrandCountMandatory = false;
        
        private const string _strandCountPrefix = "cim";
        
        public virtual float CoreRadius {
            get {
                return this.cim_coreRadius.GetValueOrDefault();
            }
            set {
                this.cim_coreRadius = value;
            }
        }
        
        public virtual bool CoreRadiusHasValue {
            get {
                return this.cim_coreRadius != null;
            }
        }
        
        public static bool IsCoreRadiusMandatory {
            get {
                return isCoreRadiusMandatory;
            }
        }
        
        public static string CoreRadiusPrefix {
            get {
                return _coreRadiusPrefix;
            }
        }
        
        public virtual int CoreStrandCount {
            get {
                return this.cim_coreStrandCount.GetValueOrDefault();
            }
            set {
                this.cim_coreStrandCount = value;
            }
        }
        
        public virtual bool CoreStrandCountHasValue {
            get {
                return this.cim_coreStrandCount != null;
            }
        }
        
        public static bool IsCoreStrandCountMandatory {
            get {
                return isCoreStrandCountMandatory;
            }
        }
        
        public static string CoreStrandCountPrefix {
            get {
                return _coreStrandCountPrefix;
            }
        }
        
        public virtual float Gmr {
            get {
                return this.cim_gmr.GetValueOrDefault();
            }
            set {
                this.cim_gmr = value;
            }
        }
        
        public virtual bool GmrHasValue {
            get {
                return this.cim_gmr != null;
            }
        }
        
        public static bool IsGmrMandatory {
            get {
                return isGmrMandatory;
            }
        }
        
        public static string GmrPrefix {
            get {
                return _gmrPrefix;
            }
        }
        
        public virtual bool Insulated {
            get {
                return this.cim_insulated.GetValueOrDefault();
            }
            set {
                this.cim_insulated = value;
            }
        }
        
        public virtual bool InsulatedHasValue {
            get {
                return this.cim_insulated != null;
            }
        }
        
        public static bool IsInsulatedMandatory {
            get {
                return isInsulatedMandatory;
            }
        }
        
        public static string InsulatedPrefix {
            get {
                return _insulatedPrefix;
            }
        }
        
        public virtual WireInsulationKind InsulationMaterial {
            get {
                return this.cim_insulationMaterial.GetValueOrDefault();
            }
            set {
                this.cim_insulationMaterial = value;
            }
        }
        
        public virtual bool InsulationMaterialHasValue {
            get {
                return this.cim_insulationMaterial != null;
            }
        }
        
        public static bool IsInsulationMaterialMandatory {
            get {
                return isInsulationMaterialMandatory;
            }
        }
        
        public static string InsulationMaterialPrefix {
            get {
                return _insulationMaterialPrefix;
            }
        }
        
        public virtual float InsulationThickness {
            get {
                return this.cim_insulationThickness.GetValueOrDefault();
            }
            set {
                this.cim_insulationThickness = value;
            }
        }
        
        public virtual bool InsulationThicknessHasValue {
            get {
                return this.cim_insulationThickness != null;
            }
        }
        
        public static bool IsInsulationThicknessMandatory {
            get {
                return isInsulationThicknessMandatory;
            }
        }
        
        public static string InsulationThicknessPrefix {
            get {
                return _insulationThicknessPrefix;
            }
        }
        
        public virtual WireMaterialKind Material {
            get {
                return this.cim_material.GetValueOrDefault();
            }
            set {
                this.cim_material = value;
            }
        }
        
        public virtual bool MaterialHasValue {
            get {
                return this.cim_material != null;
            }
        }
        
        public static bool IsMaterialMandatory {
            get {
                return isMaterialMandatory;
            }
        }
        
        public static string MaterialPrefix {
            get {
                return _materialPrefix;
            }
        }
        
        public virtual float RAC25 {
            get {
                return this.cim_rAC25.GetValueOrDefault();
            }
            set {
                this.cim_rAC25 = value;
            }
        }
        
        public virtual bool RAC25HasValue {
            get {
                return this.cim_rAC25 != null;
            }
        }
        
        public static bool IsRAC25Mandatory {
            get {
                return isRAC25Mandatory;
            }
        }
        
        public static string RAC25Prefix {
            get {
                return _rAC25Prefix;
            }
        }
        
        public virtual float RAC50 {
            get {
                return this.cim_rAC50.GetValueOrDefault();
            }
            set {
                this.cim_rAC50 = value;
            }
        }
        
        public virtual bool RAC50HasValue {
            get {
                return this.cim_rAC50 != null;
            }
        }
        
        public static bool IsRAC50Mandatory {
            get {
                return isRAC50Mandatory;
            }
        }
        
        public static string RAC50Prefix {
            get {
                return _rAC50Prefix;
            }
        }
        
        public virtual float RAC75 {
            get {
                return this.cim_rAC75.GetValueOrDefault();
            }
            set {
                this.cim_rAC75 = value;
            }
        }
        
        public virtual bool RAC75HasValue {
            get {
                return this.cim_rAC75 != null;
            }
        }
        
        public static bool IsRAC75Mandatory {
            get {
                return isRAC75Mandatory;
            }
        }
        
        public static string RAC75Prefix {
            get {
                return _rAC75Prefix;
            }
        }
        
        public virtual float Radius {
            get {
                return this.cim_radius.GetValueOrDefault();
            }
            set {
                this.cim_radius = value;
            }
        }
        
        public virtual bool RadiusHasValue {
            get {
                return this.cim_radius != null;
            }
        }
        
        public static bool IsRadiusMandatory {
            get {
                return isRadiusMandatory;
            }
        }
        
        public static string RadiusPrefix {
            get {
                return _radiusPrefix;
            }
        }
        
        public virtual float RatedCurrent {
            get {
                return this.cim_ratedCurrent.GetValueOrDefault();
            }
            set {
                this.cim_ratedCurrent = value;
            }
        }
        
        public virtual bool RatedCurrentHasValue {
            get {
                return this.cim_ratedCurrent != null;
            }
        }
        
        public static bool IsRatedCurrentMandatory {
            get {
                return isRatedCurrentMandatory;
            }
        }
        
        public static string RatedCurrentPrefix {
            get {
                return _ratedCurrentPrefix;
            }
        }
        
        public virtual float RDC20 {
            get {
                return this.cim_rDC20.GetValueOrDefault();
            }
            set {
                this.cim_rDC20 = value;
            }
        }
        
        public virtual bool RDC20HasValue {
            get {
                return this.cim_rDC20 != null;
            }
        }
        
        public static bool IsRDC20Mandatory {
            get {
                return isRDC20Mandatory;
            }
        }
        
        public static string RDC20Prefix {
            get {
                return _rDC20Prefix;
            }
        }
        
        public virtual string SizeDescription {
            get {
                return this.cim_sizeDescription;
            }
            set {
                this.cim_sizeDescription = value;
            }
        }
        
        public virtual bool SizeDescriptionHasValue {
            get {
                return this.cim_sizeDescription != null;
            }
        }
        
        public static bool IsSizeDescriptionMandatory {
            get {
                return isSizeDescriptionMandatory;
            }
        }
        
        public static string SizeDescriptionPrefix {
            get {
                return _sizeDescriptionPrefix;
            }
        }
        
        public virtual int StrandCount {
            get {
                return this.cim_strandCount.GetValueOrDefault();
            }
            set {
                this.cim_strandCount = value;
            }
        }
        
        public virtual bool StrandCountHasValue {
            get {
                return this.cim_strandCount != null;
            }
        }
        
        public static bool IsStrandCountMandatory {
            get {
                return isStrandCountMandatory;
            }
        }
        
        public static string StrandCountPrefix {
            get {
                return _strandCountPrefix;
            }
        }
    }
}
