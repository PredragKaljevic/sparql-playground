//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FTN {
    using System;
    using FTN;
    
    
    /// An electrical device consisting of  two or more coupled windings, with or without a magnetic core, for introducing mutual coupling between electric circuits. Transformers can be used to control voltage and phase shift (active power flow).
    ///A power transformer may be composed of separate transformer tanks that need not be identical.
    ///A power transformer can be modelled with or without tanks and is intended for use in both balanced and unbalanced representations.   A power transformer typically has two terminals, but may have one (grounding), three or more terminals.
    ///The inherited association ConductingEquipment.BaseVoltage should not be used.  The association from TransformerEnd to BaseVoltage should be used instead.
    public class PowerTransformer : ConductingEquipment {
        
        /// The highest operating current (Ib in IEC 60909-0) before short circuit (depends on network configuration and relevant reliability philosophy). It is used for calculation of the impedance correction factor KT defined in IEC 60909-0.
        private System.Single? cim_beforeShCircuitHighestOperatingCurrent;
        
        private const bool isBeforeShCircuitHighestOperatingCurrentMandatory = false;
        
        private const string _beforeShCircuitHighestOperatingCurrentPrefix = "cim";
        
        /// The highest operating voltage (Ub in IEC 60909-0) before short circuit. It is used for calculation of the impedance correction factor KT defined in IEC 60909-0. This is worst case voltage on the low side winding (3.7.1 of IEC 60909:2001). Used to define operating conditions.
        private System.Single? cim_beforeShCircuitHighestOperatingVoltage;
        
        private const bool isBeforeShCircuitHighestOperatingVoltageMandatory = false;
        
        private const string _beforeShCircuitHighestOperatingVoltagePrefix = "cim";
        
        /// The angle of power factor before short circuit (phib in IEC 60909-0). It is used for calculation of the impedance correction factor KT defined in IEC 60909-0. This is the worst case power factor. Used to define operating conditions.
        private System.Single? cim_beforeShortCircuitAnglePf;
        
        private const bool isBeforeShortCircuitAnglePfMandatory = false;
        
        private const string _beforeShortCircuitAnglePfPrefix = "cim";
        
        /// The minimum operating voltage (uQmin in IEC 60909-0) at the high voltage side (Q side) of the unit transformer of the power station unit. A value well established from long-term operating experience of the system. It is used for calculation of the impedance correction factor KG defined in IEC 60909-0.
        private System.Single? cim_highSideMinOperatingU;
        
        private const bool isHighSideMinOperatingUMandatory = false;
        
        private const string _highSideMinOperatingUPrefix = "cim";
        
        /// Indicates whether the machine is part of a power station unit. Used for short circuit data exchange according to IEC 60909.  It has an impact on how the correction factors are calculated for transformers, since the transformer is not necessarily part of a synchronous machine and generating unit. It is not always possible to derive this information from the model. This is why the attribute is necessary.
        private System.Boolean? cim_isPartOfGeneratorUnit;
        
        private const bool isIsPartOfGeneratorUnitMandatory = false;
        
        private const string _isPartOfGeneratorUnitPrefix = "cim";
        
        /// It is used to define if the data (other attributes related to short circuit data exchange) defines long term operational conditions or not. Used for short circuit data exchange according to IEC 60909.
        private System.Boolean? cim_operationalValuesConsidered;
        
        private const bool isOperationalValuesConsideredMandatory = false;
        
        private const string _operationalValuesConsideredPrefix = "cim";
        
        /// Vector group of the transformer for protective relaying, e.g., Dyn1. For unbalanced transformers, this may not be simply determined from the constituent winding connections and phase angle displacements.
        ///
        ///The vectorGroup string consists of the following components in the order listed: high voltage winding connection, mid voltage winding connection (for three winding transformers), phase displacement clock number from 0 to 11,  low voltage winding connection 
        ///phase displacement clock number from 0 to 11.   The winding connections are D (delta), Y (wye), YN (wye with neutral), Z (zigzag), ZN (zigzag with neutral), A (auto transformer). Upper case means the high voltage, lower case mid or low. The high voltage winding always has clock position 0 and is not included in the vector group string.  Some examples: YNy0 (two winding wye to wye with no phase displacement), YNd11 (two winding wye to delta with 330 degrees phase displacement), YNyn0d5 (three winding transformer wye with neutral high voltage, wye with neutral mid voltage and no phase displacement, delta low voltage with 150 degrees displacement).
        ///
        ///Phase displacement is defined as the angular difference between the phasors representing the voltages between the neutral point (real or imaginary) and the corresponding terminals of two windings, a positive sequence voltage system being applied to the high-voltage terminals, following each other in alphabetical sequence if they are lettered, or in numerical sequence if they are numbered: the phasors are assumed to rotate in a counter-clockwise sense.
        private string cim_vectorGroup;
        
        private const bool isVectorGroupMandatory = false;
        
        private const string _vectorGroupPrefix = "cim";
        
        public virtual float BeforeShCircuitHighestOperatingCurrent {
            get {
                return this.cim_beforeShCircuitHighestOperatingCurrent.GetValueOrDefault();
            }
            set {
                this.cim_beforeShCircuitHighestOperatingCurrent = value;
            }
        }
        
        public virtual bool BeforeShCircuitHighestOperatingCurrentHasValue {
            get {
                return this.cim_beforeShCircuitHighestOperatingCurrent != null;
            }
        }
        
        public static bool IsBeforeShCircuitHighestOperatingCurrentMandatory {
            get {
                return isBeforeShCircuitHighestOperatingCurrentMandatory;
            }
        }
        
        public static string BeforeShCircuitHighestOperatingCurrentPrefix {
            get {
                return _beforeShCircuitHighestOperatingCurrentPrefix;
            }
        }
        
        public virtual float BeforeShCircuitHighestOperatingVoltage {
            get {
                return this.cim_beforeShCircuitHighestOperatingVoltage.GetValueOrDefault();
            }
            set {
                this.cim_beforeShCircuitHighestOperatingVoltage = value;
            }
        }
        
        public virtual bool BeforeShCircuitHighestOperatingVoltageHasValue {
            get {
                return this.cim_beforeShCircuitHighestOperatingVoltage != null;
            }
        }
        
        public static bool IsBeforeShCircuitHighestOperatingVoltageMandatory {
            get {
                return isBeforeShCircuitHighestOperatingVoltageMandatory;
            }
        }
        
        public static string BeforeShCircuitHighestOperatingVoltagePrefix {
            get {
                return _beforeShCircuitHighestOperatingVoltagePrefix;
            }
        }
        
        public virtual float BeforeShortCircuitAnglePf {
            get {
                return this.cim_beforeShortCircuitAnglePf.GetValueOrDefault();
            }
            set {
                this.cim_beforeShortCircuitAnglePf = value;
            }
        }
        
        public virtual bool BeforeShortCircuitAnglePfHasValue {
            get {
                return this.cim_beforeShortCircuitAnglePf != null;
            }
        }
        
        public static bool IsBeforeShortCircuitAnglePfMandatory {
            get {
                return isBeforeShortCircuitAnglePfMandatory;
            }
        }
        
        public static string BeforeShortCircuitAnglePfPrefix {
            get {
                return _beforeShortCircuitAnglePfPrefix;
            }
        }
        
        public virtual float HighSideMinOperatingU {
            get {
                return this.cim_highSideMinOperatingU.GetValueOrDefault();
            }
            set {
                this.cim_highSideMinOperatingU = value;
            }
        }
        
        public virtual bool HighSideMinOperatingUHasValue {
            get {
                return this.cim_highSideMinOperatingU != null;
            }
        }
        
        public static bool IsHighSideMinOperatingUMandatory {
            get {
                return isHighSideMinOperatingUMandatory;
            }
        }
        
        public static string HighSideMinOperatingUPrefix {
            get {
                return _highSideMinOperatingUPrefix;
            }
        }
        
        public virtual bool IsPartOfGeneratorUnit {
            get {
                return this.cim_isPartOfGeneratorUnit.GetValueOrDefault();
            }
            set {
                this.cim_isPartOfGeneratorUnit = value;
            }
        }
        
        public virtual bool IsPartOfGeneratorUnitHasValue {
            get {
                return this.cim_isPartOfGeneratorUnit != null;
            }
        }
        
        public static bool IsIsPartOfGeneratorUnitMandatory {
            get {
                return isIsPartOfGeneratorUnitMandatory;
            }
        }
        
        public static string IsPartOfGeneratorUnitPrefix {
            get {
                return _isPartOfGeneratorUnitPrefix;
            }
        }
        
        public virtual bool OperationalValuesConsidered {
            get {
                return this.cim_operationalValuesConsidered.GetValueOrDefault();
            }
            set {
                this.cim_operationalValuesConsidered = value;
            }
        }
        
        public virtual bool OperationalValuesConsideredHasValue {
            get {
                return this.cim_operationalValuesConsidered != null;
            }
        }
        
        public static bool IsOperationalValuesConsideredMandatory {
            get {
                return isOperationalValuesConsideredMandatory;
            }
        }
        
        public static string OperationalValuesConsideredPrefix {
            get {
                return _operationalValuesConsideredPrefix;
            }
        }
        
        public virtual string VectorGroup {
            get {
                return this.cim_vectorGroup;
            }
            set {
                this.cim_vectorGroup = value;
            }
        }
        
        public virtual bool VectorGroupHasValue {
            get {
                return this.cim_vectorGroup != null;
            }
        }
        
        public static bool IsVectorGroupMandatory {
            get {
                return isVectorGroupMandatory;
            }
        }
        
        public static string VectorGroupPrefix {
            get {
                return _vectorGroupPrefix;
            }
        }
    }
}
