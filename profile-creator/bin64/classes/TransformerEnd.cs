//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FTN {
    using System;
    using FTN;
    
    
    /// A conducting connection point of a power transformer. It corresponds to a physical transformer winding terminal.  In earlier CIM versions, the TransformerWinding class served a similar purpose, but this class is more flexible because it associates to terminal but is not a specialization of ConductingEquipment.
    public class TransformerEnd : IdentifiedObject {
        
        /// Core shunt magnetizing susceptance in the saturation region.
        private System.Single? cim_bmagSat;
        
        private const bool isBmagSatMandatory = false;
        
        private const string _bmagSatPrefix = "cim";
        
        /// Number for this transformer end, corresponding to the end's order in the power transformer vector group or phase angle clock number.  Highest voltage winding should be 1.  Each end within a power transformer should have a unique subsequent end number.   Note the transformer end number need not match the terminal sequence number.
        private System.Int32? cim_endNumber;
        
        private const bool isEndNumberMandatory = false;
        
        private const string _endNumberPrefix = "cim";
        
        /// (for Yn and Zn connections) True if the neutral is solidly grounded.
        private System.Boolean? cim_grounded;
        
        private const bool isGroundedMandatory = false;
        
        private const string _groundedPrefix = "cim";
        
        /// The reference voltage at which the magnetizing saturation measurements were made.
        private System.Single? cim_magBaseU;
        
        private const bool isMagBaseUMandatory = false;
        
        private const string _magBaseUPrefix = "cim";
        
        /// Core magnetizing saturation curve knee flux level.
        private System.Single? cim_magSatFlux;
        
        private const bool isMagSatFluxMandatory = false;
        
        private const string _magSatFluxPrefix = "cim";
        
        /// (for Yn and Zn connections) Resistance part of neutral impedance where 'grounded' is true.
        private System.Single? cim_rground;
        
        private const bool isRgroundMandatory = false;
        
        private const string _rgroundPrefix = "cim";
        
        /// Terminal of the power transformer to which this transformer end belongs.
        private Terminal cim_Terminal;
        
        private const bool isTerminalMandatory = false;
        
        private const string _TerminalPrefix = "cim";
        
        /// (for Yn and Zn connections) Reactive part of neutral impedance where 'grounded' is true.
        private System.Single? cim_xground;
        
        private const bool isXgroundMandatory = false;
        
        private const string _xgroundPrefix = "cim";
        
        public virtual float BmagSat {
            get {
                return this.cim_bmagSat.GetValueOrDefault();
            }
            set {
                this.cim_bmagSat = value;
            }
        }
        
        public virtual bool BmagSatHasValue {
            get {
                return this.cim_bmagSat != null;
            }
        }
        
        public static bool IsBmagSatMandatory {
            get {
                return isBmagSatMandatory;
            }
        }
        
        public static string BmagSatPrefix {
            get {
                return _bmagSatPrefix;
            }
        }
        
        public virtual int EndNumber {
            get {
                return this.cim_endNumber.GetValueOrDefault();
            }
            set {
                this.cim_endNumber = value;
            }
        }
        
        public virtual bool EndNumberHasValue {
            get {
                return this.cim_endNumber != null;
            }
        }
        
        public static bool IsEndNumberMandatory {
            get {
                return isEndNumberMandatory;
            }
        }
        
        public static string EndNumberPrefix {
            get {
                return _endNumberPrefix;
            }
        }
        
        public virtual bool Grounded {
            get {
                return this.cim_grounded.GetValueOrDefault();
            }
            set {
                this.cim_grounded = value;
            }
        }
        
        public virtual bool GroundedHasValue {
            get {
                return this.cim_grounded != null;
            }
        }
        
        public static bool IsGroundedMandatory {
            get {
                return isGroundedMandatory;
            }
        }
        
        public static string GroundedPrefix {
            get {
                return _groundedPrefix;
            }
        }
        
        public virtual float MagBaseU {
            get {
                return this.cim_magBaseU.GetValueOrDefault();
            }
            set {
                this.cim_magBaseU = value;
            }
        }
        
        public virtual bool MagBaseUHasValue {
            get {
                return this.cim_magBaseU != null;
            }
        }
        
        public static bool IsMagBaseUMandatory {
            get {
                return isMagBaseUMandatory;
            }
        }
        
        public static string MagBaseUPrefix {
            get {
                return _magBaseUPrefix;
            }
        }
        
        public virtual float MagSatFlux {
            get {
                return this.cim_magSatFlux.GetValueOrDefault();
            }
            set {
                this.cim_magSatFlux = value;
            }
        }
        
        public virtual bool MagSatFluxHasValue {
            get {
                return this.cim_magSatFlux != null;
            }
        }
        
        public static bool IsMagSatFluxMandatory {
            get {
                return isMagSatFluxMandatory;
            }
        }
        
        public static string MagSatFluxPrefix {
            get {
                return _magSatFluxPrefix;
            }
        }
        
        public virtual float Rground {
            get {
                return this.cim_rground.GetValueOrDefault();
            }
            set {
                this.cim_rground = value;
            }
        }
        
        public virtual bool RgroundHasValue {
            get {
                return this.cim_rground != null;
            }
        }
        
        public static bool IsRgroundMandatory {
            get {
                return isRgroundMandatory;
            }
        }
        
        public static string RgroundPrefix {
            get {
                return _rgroundPrefix;
            }
        }
        
        public virtual Terminal Terminal {
            get {
                return this.cim_Terminal;
            }
            set {
                this.cim_Terminal = value;
            }
        }
        
        public virtual bool TerminalHasValue {
            get {
                return this.cim_Terminal != null;
            }
        }
        
        public static bool IsTerminalMandatory {
            get {
                return isTerminalMandatory;
            }
        }
        
        public static string TerminalPrefix {
            get {
                return _TerminalPrefix;
            }
        }
        
        public virtual float Xground {
            get {
                return this.cim_xground.GetValueOrDefault();
            }
            set {
                this.cim_xground = value;
            }
        }
        
        public virtual bool XgroundHasValue {
            get {
                return this.cim_xground != null;
            }
        }
        
        public static bool IsXgroundMandatory {
            get {
                return isXgroundMandatory;
            }
        }
        
        public static string XgroundPrefix {
            get {
                return _xgroundPrefix;
            }
        }
    }
}
